<?xml version="1.0" encoding="UTF-8"?>
<project name="Docum" default="build">
	<property file="local.properties" />
	<property name="DbChangelogDir" value="db/changelog"/>

	<path id="DocumClasspath">
		<fileset dir="${LibDir}">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<path id="ToolsClasspath">
		<fileset dir="${LibDir}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${ToolsDir}">
			<include name="**/*.jar" />
		</fileset>
		<pathelement location="${BuildDir}" />
		<pathelement location="${DbChangelogDir}" />
	</path>

	<target name="makeDirs">
		<echo message="Building Docum ..." />
		<mkdir dir="${DistDir}" />
		<mkdir dir="${BuildDir}" />
	</target>

	<target name="clean">
		<echo message="Cleaning up..." />
		<delete dir="${DistDir}" />
		<delete dir="${DeployDir}/docum" />
		<delete dir="${TomcatDir}/work/Catalina/localhost" />
	</target>

	<target name="compile" depends="makeDirs">
		<javac debug="true" destdir="${BuildDir}" classpathref="DocumClasspath" srcdir="${SrcDir}" excludes="**/Test*.java" />
		<copy todir="${BuildDir}/META-INF">
			<fileset dir="${SrcDir}/META-INF" />
		</copy>
	</target>

	<target name="validateCopy">
		<condition property="copyAllowed">
			<available file="${TomcatDir}" type="dir" />
		</condition>
	</target>

	<target name="echoValidationErr" unless="copyAllowed">
		<fail message="ERROR: ${TomcatDir} does not exists." />
	</target>

	<target name="copyToDeployDir" depends="validateCopy, echoValidationErr" if="copyAllowed">
		<copy file="${DistDir}/${WarFile}" tofile="${DeployDir}/${WarFile}" overwrite="true">
		</copy>
	</target>

	<target name="createWar" depends="compile">
		<war warfile="${DistDir}/${WarFile}" webxml="${WebContentDir}/WEB-INF/web.xml">
			<fileset dir="${WebContentDir}" />
			<lib dir="${LibDir}" excludes="**/src/**" />
			<classes dir="${BuildDir}" excludes="**/com.docum.test/**" />
		</war>
	</target>

	<target name="build" depends="clean, createWar, copyToDeployDir" />

	<target name="createVersionedWar" depends="compile, createVersion">
		<war warfile="${DistDir}/${WarFile}" webxml="${WebContentDir}/WEB-INF/web.xml">
			<fileset dir="${WebContentDir}" />
			<lib dir="${LibDir}" excludes="**/src/**" />
			<classes dir="${BuildDir}" excludes="**/com.docum.test/**" />
		</war>
	</target>

	<target name="buildVersioned" depends="clean, createVersionedWar, copyToDeployDir" />
	
	<taskdef name="hibernatetool" classname="org.hibernate.tool.ant.HibernateToolTask"
		classpathref="ToolsClasspath" />
	<target name="_db-drop-old" depends="compile">
		<hibernatetool destdir="">
			<jpaconfiguration persistenceunit="docum" propertyfile="local.properties" />
			<hbm2ddl drop="true" create="false" export="true" update="false" />
			<classpath>
				<path location="${BuildDir}" />
			</classpath>
		</hibernatetool>
	</target>
	<target name="_db-create-empty-old" depends="compile">
		<hibernatetool destdir="">
			<jpaconfiguration persistenceunit="docum" propertyfile="local.properties" />
			<hbm2ddl drop="true" create="true" export="true" update="false" />
		</hibernatetool>
	</target>
	<target name="_db-create-old" depends="_db-create-empty-old">
		<junit>
			<classpath refid="ToolsClasspath" />
			<test name="com.docum.test.data.TestDataPreparator" />
		</junit>
	</target>
	<target name="_db-update-old" depends="compile">
		<hibernatetool destdir="">
			<jpaconfiguration persistenceunit="docum" propertyfile="local.properties" />
			<hbm2ddl drop="false" create="false" export="true" update="true" />
		</hibernatetool>
	</target>

	<target name="_db-doc-old" depends="compile" description="Generate a html description of the mappings">
		<hibernatetool destdir="hibernate-html">
			<jpaconfiguration persistenceunit="docum" propertyfile="local.properties" />
			<hbm2doc />
		</hibernatetool>
	</target>

	<path id="tomcat.class.path">
		<fileset dir="${TomcatDir}/lib">
			<include name="**/*.jar" />
			<include name="**/*.zip" />
		</fileset>
		<pathelement location="${TomcatDir}/bin/bootstrap.jar" />
		<pathelement location="${TomcatDir}/bin/tomcat-juli.jar" />
	</path>

	<target name="tomcat-stop" depends="tomcat-check-status" if="tomcat.started">
		<java classname="org.apache.catalina.startup.Bootstrap" fork="true"
		        classpathref="tomcat.class.path">
			<jvmarg value="-Dcatalina.home=${TomcatDir}"/>
			<arg line="stop"/>
		</java>
		<sleep seconds="5"/>
	</target>

	<target name="tomcat-start" depends="tomcat-stop, buildVersioned">
		<java classname="org.apache.catalina.startup.Bootstrap" 
			fork="true" classpathref="tomcat.class.path">
			<jvmarg value="-Dcatalina.home=${TomcatDir}" />
			<jvmarg value="-Xms128m" />
			<jvmarg value="-Xmx512m" />
			<jvmarg value="-XX:MaxPermSize=512m" />
		</java>
	</target>

	<target name="tomcat-start-debug" depends="tomcat-stop, buildVersioned">
		<java classname="org.apache.catalina.startup.Bootstrap"
			fork="true" classpathref="tomcat.class.path">
			<jvmarg value="-Dcatalina.home=${TomcatDir}" />
			<jvmarg value="-Xdebug" />
			<jvmarg value="-Xrunjdwp:transport=dt_socket,address=8787,server=y,suspend=n" />
			<jvmarg value="-Xms128m" />
			<jvmarg value="-Xmx512m" />
			<jvmarg value="-XX:MaxPermSize=512m" />
		</java>
	</target>

	<target name="tomcat-check-status">
		<condition property="tomcat.started">
			<socket server="localhost" port="8080"/>
		</condition>
	</target>


  <taskdef resource="liquibasetasks.properties">
      <classpath refid="ToolsClasspath"/>
  </taskdef>
	
	<target name="db-gen-changelog">
		<fail unless="database.url">database.url not set</fail>
		<fail unless="database.username">database.username not set</fail>
		<fail unless="database.password">database.password not set</fail>

		<generateChangeLog
	            outputFile="output.xml"
	            driver="${database.class}"
	            url="${database.url}"
	            username="${database.username}"
	            password="${database.password}"
							classpathref="ToolsClasspath" />
	</target>


	<macrodef name="db-update-private">
		<attribute name="dropFirst"/>
		<sequential>
	    <fail unless="database.url">database.url not set</fail>
	    <fail unless="database.username">database.username not set</fail>
	    <fail unless="database.password">database.password not set</fail>
	 
	    <updateDatabase
	            changeLogFile="changelog-master.xml"
	            driver="${database.class}"
	            url="${database.url}"
	            username="${database.username}"
	            password="${database.password}"
	            dropFirst="@{dropFirst}"
	            classpathref="ToolsClasspath"/>
		</sequential>
	</macrodef>
		
	<target name="db-update">
		<db-update-private dropFirst="false"/>
	</target>

	<target name="db-create">
		<db-update-private dropFirst="true"/>
	</target>

	<target name="db-populate" depends="db-create">
		<junit>
			<classpath refid="ToolsClasspath" />
			<test name="com.docum.test.data.TestDataPreparator" />
		</junit>
	</target>

	<target name="createVersion">
		<taskdef name="svnbuildnumber" classname="org.codebistro.tools.BuildNumberTask"
			classpathref="ToolsClasspath"/>
		<svnbuildnumber baseDir="${basedir}" outputPath="${BuildDir}/buildnumber.properties"/>
	</target>
	
</project>
